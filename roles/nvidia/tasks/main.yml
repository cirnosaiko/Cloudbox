#########################################################################
# Title:         Cloudbox: Nvidia Role                                  #
# Author(s):     desimaniac, l3uddz                                     #
# URL:           https://github.com/cloudbox/cloudbox                   #
# --                                                                    #
#         Part of the Cloudbox project: https://cloudbox.works          #
#########################################################################
#                   GNU General Public License v3.0                     #
#########################################################################
---
- name: Install common pip modules
  raw: pip install jmespath

- name: Fetch Nvidia card info
  shell: |
      if [ `lspci | grep -c -E '.*VGA.*NVIDIA'` -eq 1 ]; then
        lspci -s $(lspci | grep -E '.*VGA.*NVIDIA' | cut -d' ' -f 1)
      else
        echo ""
      fi
  register: lspci_resp

- name: Nvidia Setup block
  block:

  # Install Ubuntu drivers

  - name: Install Ubuntu drivers
    apt:
      name: ubuntu-drivers-common
      update_cache: yes
      state: present

  - name: Get list of devices
    shell: ubuntu-drivers devices
    register: ubuntu_devices

  - name: Set 'manual_install_is_disabled' variable
    set_fact:
      manual_install_is_disabled: "{{ 'manual_install: True' not in ubuntu_devices.stdout }}"

  # Configure Nvidia Kernel

  - name: Nvidia Kernel Tasks
    block:

    - name: Check if 'blacklist-nouveau.conf' exists
      stat:
        path: "{{ nvidia_kernel_blacklist_nouveau_conf_location }}"
      register: blacklist_nouveau_conf

    - name: "Nvidia Kernel Task"
      include_tasks: "subtasks/kernel.yml"
      when:
        - (not blacklist_nouveau_conf.stat.exists)
        - (nvidia_kernel_blacklist_nouveau)

    when: manual_install_is_disabled

  # Install Nvidia Driver

  - name: Nvidia Driver Tasks
    block:

    - name: "Nvidia Driver Task"
      include_tasks: "subtasks/driver.yml"
      when: (nvidia_driver_version | lower != 'ignore')

    when: manual_install_is_disabled

  # Install Nvidia Driver Patch to remove transcode limit

  - name: Nvidia Driver Patch Tasks
    block:

    - name: Check to see if patch backup files exist
      find:
        paths: "{{ nvidia_patch_backup_file_location }}"
        file_type: file
        recurse: yes
        patterns: '*.so*'
      register: nvidia_patch_backup_files

    - name: "Nvidia Driver Patch Task"
      include_tasks: "subtasks/patch.yml"
      when: (nvidia_patch_backup_files.matched|int == 0)

    when: ('GeForce' in lspci_resp.stdout)

  # Install Nvidia Runtime Container

  - name: Nvidia Runtime Container Tasks
    block:

    - name: Get contents of 'daemon.json'
      shell: cat /etc/docker/daemon.json
      register: docker_daemon_json

    - name: Set 'docker_default_runtime'
      set_fact:
        docker_default_runtime: "{{ docker_daemon_json.stdout | from_json | json_query('\"default-runtime\"') }}"

    - name: "Nvidia Docker Task"
      include_tasks: "subtasks/docker.yml"
      when: (docker_default_runtime != 'nvidia')

  # Install Nvidia Nvtop Tool

  - name: Nvidia Nvtop Tasks
    block:

    - name: Check if 'nvtop' exists
      stat:
        path: "{{ nvidia_nvtop_location }}"
      register: nvtop_binary

    - name: "Nvidia Nvtop Task"
      include_tasks: "subtasks/nvtop.yml"
      when: not nvtop_binary.stat.exists

  when: (ansible_distribution == 'Ubuntu') and ('NVIDIA' in lspci_resp.stdout)
